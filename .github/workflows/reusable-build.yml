name: build-ucore
on:
  workflow_call:
    inputs:
      coreos_version:
        description: 'The CoreOS stream: stable or testing'
        required: true
        type: string
      architecture:
        description: "JSON string of architectures to build, '[aarch64, x86_64]'"
        default: "['x86_64']"
        required: false
        type: string
env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.fedora_version }}
  cancel-in-progress: true

jobs:
  workflow_info:
    name: Get Workflow Info
    runs-on: ubuntu-24.04
    outputs:
      pr_prefix: ${{ steps.pr_prefix.outputs.pr_prefix }}
    steps:
      - name: Set PR Prefix
        id: pr_prefix
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              PR_PREFIX="pr-${{ github.event.number }}-"
          else
              PR_PREFIX=""
          fi
          echo "pr_prefix=${PR_PREFIX}" >> $GITHUB_OUTPUT
      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.pr_prefix.outputs) }}"

  stream_info:
    name: Get Stream Info
    runs-on: ${{ matrix.architecture == 'x86_64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    strategy:
      fail-fast: false
      matrix:
        architecture: ${{ fromJson(inputs.architecture) }}
    steps:
      - name: Fetch CoreOS stream versions
        id: fetch
        uses: &wretry Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -euxo pipefail

            skopeo inspect docker://quay.io/fedora/fedora-coreos:${{ inputs.coreos_version }} > inspect.json

            image=$(jq -r '.["Labels"]["org.opencontainers.image.version"]' inspect.json)
            if [ -z "$image" ] || [ "null" = "$image" ]; then
                echo "inspected image version must not be empty or null"
                exit 1
            fi

            if [[ "${image}" =~ "42.20250410.3" ]]; then
                echo "WARNING: Overriding known problematic release. Downgrading from 42.20250410.3.* to 41.20250331.3.0"
                image="41.20250331.3.0"
            fi

            fedora=$(echo "$image" | cut -f1 -d.)
            if [ -z "$fedora" ] || [ "null" = "$fedora" ]; then
                echo "fedora version must not be empty or null"
                exit 1
            fi

            kernel=$(skopeo inspect docker://ghcr.io/ublue-os/akmods:coreos-${{ inputs.coreos_version }}-${fedora} | jq -r '.["Labels"]["ostree.linux"]')
            if [ -z "$kernel" ] || [ "null" = "$kernel" ]; then
                echo "inspected linux (kernel) version must not be empty or null"
                exit 1
            fi


            echo "kernel=$kernel" >> $GITHUB_ENV
            echo "image=$image" >> $GITHUB_ENV
            echo "fedora=$fedora" >> $GITHUB_ENV
      - name: Echo outputs
        run: |
          echo "FEDORA_VERSION=${{ env.fedora }}" > stream-info.env
          echo "IMAGE_VERSION=${{ env.image }}" >> stream-info.env
          echo "KERNEL_VERSION=${{ env.kernel }}" >> stream-info.env
          cat stream-info.env
      - name: Upload stream info as artifact
        uses: &upload actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: stream-info-${{ matrix.architecture }}
          path: |
            stream-info.env
          retention-days: 1

  build_ucore:
    name: ucore ${{ matrix.architecture }}
    runs-on: ${{ matrix.architecture == 'x86_64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    if: always() && !cancelled()
    needs: [workflow_info, stream_info]
    permissions:
      contents: read
    env:
      KERNEL_FLAVOR: coreos-${{ inputs.coreos_version }}
      PR_PREFIX: ${{ needs.workflow_info.outputs.pr_prefix }}

    strategy:
      fail-fast: false
      matrix:
        image_suffix: &image_suffix
          # - "-minimal"
          # - ""
          - "-hci"
        include: &include
          # - image_suffix: "-minimal"
          #   description: An OCI image of Fedora CoreOS with a few extra tools and suitable for running in a VM
          # - image_suffix: ""
          #   description: An OCI image of Fedora CoreOS with a few extra tools, hardware support, and storage utilities
          - image_suffix: "-hci"
            description: A hyper-converged infrastructure OCI image of Fedora CoreOS (storage + hypervisor)
        architecture: ${{ fromJson(inputs.architecture) }}

    steps:
      - name: Disable AppArmor
        uses: &apparmor cisagov/action-disable-apparmor@437d94f26a2e4bf8c03acfb500a6afc688b497db # v1

      - name: Checkout Push to Registry action
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Update Podman and Buildah
        shell: bash
        run: &buildah |
          set -euxo pipefail

          case "$(uname -m)" in
            x86_64)
              IMAGE_ARCH='amd64'
              ;;
            aarch64)
              IMAGE_ARCH='arm64'
              ;;
            *)
              printf "Invalid architecture" >&2
              exit 1
              ;;
          esac

          # Remove snap
          sudo apt remove -yq --purge firefox
          while [ -n "$(snap list | awk '!/^Name/ {print $1}')" ]
          do
              SNAPS=( $(snap list | awk '!/^Name/ {print $1}') )
              for s in "${SNAPS[@]}"
              do
                  sudo snap disable "$s"
                  sudo snap remove --purge "$s"
              done
          done;

          sudo rm -rf /etc/systemd/system/snapd.mounts.target.wants

          sudo apt-get remove -yq --purge snapd buildah crun podman fuse3 fuse-overlayfs passt

          sudo rm -rf /var/cache/snapd/ /var/snap/

          curl -fsSL# "https://github.com/mgoltzsche/podman-static/releases/latest/download/podman-linux-${IMAGE_ARCH}.tar.gz" | sudo tar --strip-component 1 -xzf - -C /
          curl -fsSL# "https://github.com/HeavenVolkoff/buildah-static/releases/latest/download/buildah-${IMAGE_ARCH}.tar.gz" | sudo tar -xzf - -C /usr/local/bin

      - name: Download stream info artifact
        uses: &download actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: stream-info-${{ matrix.architecture }}
          path: .

      # sent env variables which depend on the matrix
      - name: Matrix variables
        shell: bash
        run: |
          set -euxo pipefail
          IMAGE_NAME='ucore${{ matrix.image_suffix }}'
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          cat stream-info.env >> $GITHUB_ENV

      - name: Pull base and kmod images
        uses: *wretry
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            # pull the base image used for FROM in containerfile so
            # we can retry on that unfortunately common failure case
            podman pull quay.io/fedora/fedora-coreos:${{ env.IMAGE_VERSION }}
            podman pull ghcr.io/ublue-os/akmods:${{ env.KERNEL_FLAVOR }}-${{ env.FEDORA_VERSION }}
            podman pull ghcr.io/ublue-os/akmods-zfs:${{ env.KERNEL_FLAVOR }}-${{ env.FEDORA_VERSION }}

      - name: Verify versions (image, kernel, zfs)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -z "${{ env.FEDORA_VERSION }}" ] || [ "null" = "${{ env.FEDORA_VERSION }}" ]; then
              echo "env.FEDORA_VERSION must not be empty or null"
              exit 1
          fi
          if [ -z "${{ env.IMAGE_VERSION }}" ] || [ "null" = "${{ env.IMAGE_VERSION }}" ]; then
              echo "env.IMAGE_VERSION must not be empty or null"
              exit 1
          fi
          if [ -z "${{ env.KERNEL_VERSION }}" ] || [ "null" = "${{ env.KERNEL_VERSION }}" ]; then
              echo "env.KERNEL_VERSION must not be empty or null"
              exit 1
          fi
          podman inspect ghcr.io/ublue-os/akmods:${{ env.KERNEL_FLAVOR }}-${{ env.FEDORA_VERSION }} > inspect.json
          kernel=$(jq -r '.[]["Config"]["Labels"]["ostree.linux"]' inspect.json)
          if [[ "${{ env.KERNEL_VERSION }}" != "$kernel"*  ]]; then
              echo "pulled akmods image kernel ($kernel) does not match expected kernel (${{ env.KERNEL_VERSION }})"
              exit 1
          fi
          podman inspect ghcr.io/ublue-os/akmods-zfs:${{ env.KERNEL_FLAVOR }}-${{ env.FEDORA_VERSION }} > inspect.json
          kernel=$(jq -r '.[]["Config"]["Labels"]["ostree.linux"]' inspect.json)
          if [[ "${{ env.KERNEL_VERSION }}" != "$kernel"*  ]]; then
              echo "pulled akmods-zfs image kernel ($kernel) does not match expected kernel (${{ env.KERNEL_VERSION }})"
              exit 1
          fi

      # Build metadata
      - name: Image Metadata
        uses: &metadata_action docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        id: meta
        with: &metadata
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/120078124?s=200&v=4
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/ublue-os/ucore/main/README.md
            org.opencontainers.image.description=${{ matrix.description }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ env.IMAGE_VERSION }}

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          containerfiles: |
            ./ucore/Containerfile
          context: ./ucore
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ matrix.architecture }}
          build-args: |
            COREOS_VERSION=${{ inputs.coreos_version }}
            FEDORA_VERSION=${{ env.FEDORA_VERSION }}
            IMAGE_VERSION=${{ env.IMAGE_VERSION }}
            KERNEL_FLAVOR=${{ env.KERNEL_FLAVOR }}
            PR_PREFIX=${{ env.PR_PREFIX }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false
          extra-args: |
            --target=${{ env.IMAGE_NAME }}

      - name: Check Secureboot and Export
        shell: bash
        run: |
          set -euxo pipefail
          if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) ]]; then
            sudo apt update
            sudo apt install sbsigntool curl openssl
          fi

          IMAGE_TAG='${{ matrix.architecture }}'
          IMAGE_NAME='${{ env.IMAGE_NAME }}'

          podman run --rm --entrypoint cat "${IMAGE_NAME}:${IMAGE_TAG}" /usr/lib/modules/${{ env.KERNEL_VERSION }}/vmlinuz > ./vmlinuz
          sbverify --list vmlinuz
          curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der
          curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der
          openssl x509 -in kernel-sign.der -out kernel-sign.crt
          openssl x509 -in akmods.der -out akmods.crt
          sbverify --cert kernel-sign.crt vmlinuz || exit 1
          sbverify --cert akmods.crt vmlinuz || exit 1

          buildah push "${IMAGE_NAME}:${IMAGE_TAG}" docker-archive:ucore-${{ matrix.architecture }}.tar

      - name: Upload Image Artifact
        uses: *upload
        with:
          name: image${{ matrix.image_suffix }}-${{ matrix.architecture }}
          path: ucore-${{ matrix.architecture }}.tar
          retention-days: 1

  push_and_sign:
    name: Push Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [build_ucore]
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_suffix: *image_suffix
        include: *include
    steps:
      - name: Disable AppArmor
        uses: *apparmor

      - name: Update Podman and Buildah
        shell: bash
        run: *buildah

      - name: Download stream info artifact
        uses: *download
        with:
          name: stream-info-${{ fromJson(inputs.architecture)[0] }}
          path: .

      - name: Download all image artifacts for variant ucore${{ matrix.image_suffix }}
        uses: *download
        with:
          # Download all artifacts that match this pattern into a directory
          pattern: image${{ matrix.image_suffix }}-*
          path: images/
          merge-multiple: true # This places all matching artifacts into the 'path' directory

      # sent env variables which depend on the matrix
      - name: Matrix variables
        shell: bash
        run: |
          set -x
          IMAGE_NAME='ucore${{ matrix.image_suffix }}'
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          cat stream-info.env >> $GITHUB_ENV

      # Build metadata
      - name: Image Metadata
        uses: *metadata_action
        id: meta
        with: *metadata

      - name: Create Manifest
        id: create_manifest
        shell: bash
        run: |
          set -euxo pipefail

          IMAGE_NAME='${{ env.IMAGE_NAME }}'
          IMAGE_TAGS=()

          for IMAGE in images/ucore-*.tar; do
              IMAGE_ARCH="${IMAGE#images/ucore-}"
              IMAGE_ARCH="${IMAGE_ARCH%.tar}"
              IMAGE_TAGS+=("$IMAGE_ARCH")

              buildah pull --arch="$IMAGE_ARCH" "docker-archive:${IMAGE}"
          done

          echo "Creating manifest for $IMAGE_NAME"
          buildah manifest create --annotation="$(echo '${{ steps.meta.outputs.labels }}' | awk -F':' '{ print $2 }' | head -c -1 | tr '\n' ',')" "${IMAGE_NAME}:latest"

          for IMAGE_TAG in "${IMAGE_TAGS[@]}"; do
            IMAGE="${IMAGE_NAME}:${IMAGE_TAG}"
            echo "Adding ${IMAGE} to manifest"
            buildah manifest add "${IMAGE_NAME}:latest" "$IMAGE"
          done

          echo 'Final manifest contents:'
          buildah manifest inspect "$IMAGE_NAME"

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          set -euxo pipefail

          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          COREOS_VERSION="${{ inputs.coreos_version }}"

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${COREOS_VERSION}")
          COMMIT_TAGS+=("${SHA_SHORT}-${COREOS_VERSION}")

          BUILD_TAGS=("${COREOS_VERSION}" "${COREOS_VERSION}-${TIMESTAMP}")
          # always add the '-zfs' tag to each image since we include ZFS with them all
          # and we want users of the existing '-zfs' images to still get updates
          BUILD_TAGS+=("${COREOS_VERSION}-zfs")
          BUILD_TAGS+=("${COREOS_VERSION}-zfs-${TIMESTAMP}")

          IMAGE_NAME='${{ env.IMAGE_NAME }}'
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
                  buildah tag "${IMAGE_NAME}:latest" "${IMAGE_NAME}:${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              echo "Generated the following build tags: "
              for TAG in "${BUILD_TAGS[@]}"; do
                  echo "${TAG}"
                  buildah tag "${IMAGE_NAME}:latest" "${IMAGE_NAME}:${TAG}"
              done
                
              if [[ "${COREOS_VERSION}" == "stable" ]]; then
                  echo "latest"
                  BUILD_TAGS+=("latest")
              fi

              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: *wretry
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ env.IMAGE_NAME }}
            tags: ${{ steps.generate-tags.outputs.alias_tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  check:
    name: Check all successful
    runs-on: ubuntu-latest
    needs: [push_and_sign]
    steps:
      - name: Exit
        shell: bash
        run: exit 0
